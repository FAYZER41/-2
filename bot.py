import random
import asyncio
import nest_asyncio  # type: ignore
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –†–∞–∑—Ä–µ—à–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
player_scores = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in player_scores:
        player_scores[user_id] = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞

    keyboard = [
        [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data='play')],
        [InlineKeyboardButton("–ú–æ–π —Å—á–µ—Ç", callback_data='score')],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='other')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ö—É–±–∏–∫üé≤", callback_data='play_dice')], 
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name  # –ù—É–∂–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—á—ë—Ç—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_scores = sorted(player_scores.items(), key=lambda item: item[1], reverse=True)
    ranking = [f"{i+1}. {context.bot.get_chat(item[0]).first_name}" for i, item in enumerate(sorted_scores)][:5]  # –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤
    ranking_position = sorted_scores.index((user_id, player_scores[user_id])) + 1

    await query.edit_message_text(
        text=f"–†–µ–π—Ç–∏–Ω–≥:\n{'\n'.join(ranking)}\n\n–í—ã: {player_scores[user_id]} ({ranking_position} –º–µ—Å—Ç–æ)",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]])
    )

async def other(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞)\n2202206260918441 (—Å–±–µ—Ä–±–∞–Ω–∫))",
                                   reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]]))

async def dice_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = update.effective_user.id

    if query.data == 'play_dice': 
        keyboard = [
            [InlineKeyboardButton("–ß–µ—Ç/–ù–µ—á–µ—Ç", callback_data='even_odd')],
            [InlineKeyboardButton("–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ", callback_data='greater_less')],  # –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ"
            [InlineKeyboardButton("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data='guess_number')],
            [InlineKeyboardButton("–°–µ–≥–º–µ–Ω—Ç—ã", callback_data='segments')],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_to_message_id
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=reply_markup) 

    elif query.data == 'stop':
        await query.message.reply_text(f"–ñ–∞–ª—åüòî –Ω–∞–ø–∏—à–∏—Ç–µ /start –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å \n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {player_scores[user_id]}")

    elif query.data == 'back_to_main_menu':
        await start(update, context)

    elif query.data == 'even_odd': 
        context.user_data['mode'] = 'even_odd'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        await bet_even_odd(update, context)

    elif query.data == 'greater_less':
        context.user_data['mode'] = 'greater_less'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        await bet_greater_less(update, context)

    elif query.data == 'guess_number':
        context.user_data['mode'] = 'guess_number'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        await guess_number_game(update, context)

    elif query.data == 'segments':  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–º–µ–Ω—Ç—ã"
        context.user_data['mode'] = 'segments'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        await bet_segments(update, context)

    elif query.data in ['even', 'odd', 'greater', 'less']:
        await roll_dice(update, context)

async def bet_even_odd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ß–µ—Ç–Ω–æ–µ", callback_data='even')],
        [InlineKeyboardButton("–ù–µ—á–µ—Ç–Ω–æ–µ", callback_data='odd')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ context.user_data
    context.user_data['mode'] = 'even_odd'

async def bet_greater_less(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ë–æ–ª—å—à–µ", callback_data='greater')],
        [InlineKeyboardButton("–ú–µ–Ω—å—à–µ", callback_data='less')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ context.user_data
    context.user_data['mode'] = 'greater_less'
    context.user_data['bet'] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ context.user_data

async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE, bet=None) -> None:  # –î–æ–±–∞–≤–∏–ª–∏ bet
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = ""

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (3 —Å–µ–∫—É–Ω–¥—ã) 
    await asyncio.sleep(1)
    dice_message = await query.message.reply_dice(emoji='üé≤')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞
    await asyncio.sleep(3)  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

    roll = dice_message.dice.value  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
    if context.user_data['mode'] == 'even_odd':  # –ß–µ—Ç/–ù–µ—á–µ—Ç
        result = "–ü–û–ë–ï–î–êüèÜ" if roll % 2 == 0 else "–ü–†–û–ò–ì–†–´–®üé≠"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ —á–µ—Ç–Ω–æ—Å—Ç–∏
    elif context.user_data['mode'] == 'greater_less':  # –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ

        if bet == 'greater':  # –ë–æ–ª—å—à–µ
            result = "–ü–û–ë–ï–î–êüèÜ" if roll > 3 else "–ü–†–û–ò–ì–†–´–®üé≠"
        elif bet == 'less':  # –ú–µ–Ω—å—à–µ
            result = "–ü–û–ë–ï–î–êüèÜ" if roll < 4 else "–ü–†–û–ò–ì–†–´–®üé≠"
    elif context.user_data['mode'] == 'segments':  # –°–µ–≥–º–µ–Ω—Ç—ã
        if context.user_data['bet'] == 'lower' and roll in [1, 2]:
            result = "–ü–û–ë–ï–î–êüèÜ"
        elif context.user_data['bet'] == 'middle' and roll in [3, 4]:
            result = "–ü–û–ë–ï–î–êüèÜ"
        elif context.user_data['bet'] == 'higher' and roll in [5, 6]:
            result = "–ü–û–ë–ï–î–êüèÜ"
        else:
            result = "–ü–†–û–ò–ì–†–´–®üé≠"

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='play_dice')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(f"üé≤  –ö—É–±–∏–∫ –≤—ã–ø–∞–ª: {roll}. {result}", reply_markup=reply_markup)  #  –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª
    if result == "–ü–û–ë–ï–î–êüèÜ":
        player_scores[user_id] += 1

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
    await asyncio.sleep(1)

async def guess_number_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton("1", callback_data='1')],
        [InlineKeyboardButton("2", callback_data='2')],
        [InlineKeyboardButton("3", callback_data='3')],
        [InlineKeyboardButton("4", callback_data='4')],
        [InlineKeyboardButton("5", callback_data='5')],
        [InlineKeyboardButton("6", callback_data='6')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:", reply_markup=reply_markup)

async def guess_number_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    guess = int(query.data)

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ 
    await asyncio.sleep(1)
    dice_message = await query.message.reply_dice(emoji='üé≤')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞
    secret_number = dice_message.dice.value  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
    await asyncio.sleep(3)  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

    result = ""
    if guess == secret_number:
        result = "–ü–û–ë–ï–î–êüèÜ"
        player_scores[user_id] += 1
    else:
        result = "–ü–†–û–ò–ì–†–´–®üé≠"

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='play_dice')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"üé≤  –ö—É–±–∏–∫ –≤—ã–ø–∞–ª: {secret_number}. {result}", reply_markup=reply_markup)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
    await asyncio.sleep(1)

    await play(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã

async def bet_segments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ù–∏–∑—à–∏–π —Å–µ–≥–º–µ–Ω—Ç (1-2)", callback_data='lower')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç (3-4)", callback_data='middle')],
        [InlineKeyboardButton("–í—ã—Å—à–∏–π —Å–µ–≥–º–µ–Ω—Ç (5-6)", callback_data='higher')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ context.user_data
    context.user_data['mode'] = 'segments'
    context.user_data['bet'] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ context.user_data

async def segments_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ 
    await asyncio.sleep(1)
    dice_message = await query.message.reply_dice(emoji='üé≤')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞
    roll = dice_message.dice.value  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
    await asyncio.sleep(3)  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

    result = ""
    if context.user_data['bet'] == 'lower' and roll in [1, 2]:
        result = "–ü–û–ë–ï–î–êüèÜ"
        player_scores[user_id] += 1
    elif context.user_data['bet'] == 'middle' and roll in [3, 4]:
        result = "–ü–û–ë–ï–î–êüèÜ"
        player_scores[user_id] += 1
    elif context.user_data['bet'] == 'higher' and roll in [5, 6]:
        result = "–ü–û–ë–ï–î–êüèÜ"
        player_scores[user_id] += 1
    else:
        result = "–ü–†–û–ò–ì–†–´–®üé≠"

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"üé≤  –ö—É–±–∏–∫ –≤—ã–ø–∞–ª: {roll}. {result}", reply_markup=reply_markup)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
    await asyncio.sleep(1)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
    await play(update, context) 

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if query.data == 'play_dice':  
        await dice_game(update, context)  

    elif query.data == 'play':
        await play(update, context) 

    elif query.data == 'score':
        await score(update, context)

    elif query.data == 'other':
        await other(update, context)

    elif query.data == 'back_to_main_menu':
        await start(update, context)

    elif query.data == 'even_odd':  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–ß–µ—Ç/–ù–µ—á–µ—Ç"
        await bet_even_odd(update, context)

    elif query.data == 'greater_less':  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ"
        await bet_greater_less(update, context)

    elif query.data in ['even', 'odd']:
        await roll_dice(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ß–µ—Ç–Ω–æ–µ" –∏ "–ù–µ—á–µ—Ç–Ω–æ–µ"
    elif query.data in ['greater', 'less']:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ë–æ–ª—å—à–µ" –∏ "–ú–µ–Ω—å—à–µ"
        await roll_dice(update, context, query.data)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞–≤–∫—É –≤ roll_dice

    elif query.data == 'continue':
        if 'mode' in context.user_data:
            await dice_game(update, context)  # –í—ã–∑—ã–≤–∞–µ–º dice_game –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã

    elif query.data == 'guess_number':  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
        await guess_number_game(update, context)

    elif query.data in ['1', '2', '3', '4', '5', '6']:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –≤ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
        await guess_number_handler(update, context) 

    elif query.data == 'segments':  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–º–µ–Ω—Ç—ã"
        await bet_segments(update, context)  # –í—ã–∑—ã–≤–∞–µ–º bet_segments –¥–ª—è "–°–µ–≥–º–µ–Ω—Ç—ã"

async def main() -> None:
    application = ApplicationBuilder().token('7927429460:AAG-uicBpkJ4ayiSQ7_XW9wmmODjlikb2g0').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    await application.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.run_polling()  # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    asyncio.run(main())